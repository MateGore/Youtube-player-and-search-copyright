import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from yt_dlp import YoutubeDL
import os
import sys

TELEGRAM_TOKEN = 'TOKEN'
bot = telebot.TeleBot(TELEGRAM_TOKEN)

youtube_ap_user_sessions = {} #–°–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Å–µ—Å—Å–∏–∏ —é–∑–µ—Ä–æ–≤

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è /–∞–≤—Ç–æ—Ä—Å–∫–æ–≥–æ –ø—Ä–∞–≤–∞ (–∞–ø)
def youtube_ap_music_extract_music_info(description):
    keywords = ["–ú—É–∑—ã–∫–∞", "‚Ñó", "¬©", "–¢—Ä–µ–∫–æ–≤", "Copyright", "–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞", "Rights", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "–ê–ª—å–±–æ–º", "–õ–∏—Ü–µ–Ω–∑–∏—è", "–ó–∞–≥—Ä—É–∑–∫–∏", "–°—Å—ã–ª–∫–∏", "https://"]
    lines = description.splitlines()
    music_info = []
    capture = False

    for line in lines:
        if any(keyword in line for keyword in keywords):
            capture = True
            music_info.append(f"<b>{line.strip()}</b>")
        elif capture and line.strip():
            music_info.append(line.strip())
        elif capture and not line.strip():
            capture = False

    return "\n".join(music_info) if music_info else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

def youtube_ap_music_search_youtube(query):
    ydl_opts = {
        'format': 'bestaudio/best',
        'noplaylist': True,
        'default_search': 'ytsearch1:',
        'quiet': True,
        'no_warnings': True,
    }

    with YoutubeDL(ydl_opts) as ydl:
        info_dict = ydl.extract_info(query, download=False)
        video_url = info_dict['entries'][0]['webpage_url']
        title = info_dict['entries'][0]['title']
        description = info_dict['entries'][0]['description']
        music_info = youtube_ap_music_extract_music_info(description)
    return video_url, title, music_info

@bot.message_handler(commands=['–∞–ø'])
def youtube_ap_music_download_audio(message):
    query = message.text.split(maxsplit=1)
    if len(query) < 2:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
        return

    search_query = query[1]

    if 'youtube.com' in search_query or 'youtu.be' in search_query:
        url = search_query
        title, music_info = None, None
    else:
        bot.reply_to(message, f"–ò—â—É '{search_query}', –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        url, title, music_info = youtube_ap_music_search_youtube(search_query)

    bot.reply_to(message, f"–¢—Ä–µ–∫ –Ω–∞–π–¥–µ–Ω! –°—Å—ã–ª–∫–∞: {url}\n{music_info}", parse_mode="HTML")

    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': 'audio.%(ext)s',
        'quiet': True,
        'no_warnings': True,
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
    }

    mp3_audio_file = None

    try:
        with open(os.devnull, 'w') as devnull:
            sys.stdout = devnull
            sys.stderr = devnull
            with YoutubeDL(ydl_opts) as ydl:
                info_dict = ydl.extract_info(url, download=True)
                mp3_audio_file = ydl.prepare_filename(info_dict).replace('.webm', '.mp3').replace('.m4a', '.mp3')

        sys.stdout = sys.__stdout__
        sys.stderr = sys.__stderr__

        if os.path.getsize(mp3_audio_file) > 15 * 1024 * 1024:  # 15 MB
            bot.reply_to(message, "–¢—Ä–µ–∫ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø—Ä–µ–≤—ã—à–∞–µ—Ç 15 –ú–ë).")
        else:
            with open(mp3_audio_file, 'rb') as audio:
                bot.send_audio(message.chat.id, audio, title=title)

    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    finally:
        if mp3_audio_file and os.path.exists(mp3_audio_file):
            os.remove(mp3_audio_file)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è /–ø–æ—Ç–æ–∫
def youtube_ap_search_youtube(query, num_results=10):
    ydl_opts = {
        'format': 'bestaudio/best',
        'noplaylist': True,
        'default_search': f'ytsearch{num_results}:',
        'quiet': True,
        'no_warnings': True,
        'encoding': 'utf-8'
    }

    try:
        with YoutubeDL(ydl_opts) as ydl:
            info_dict = ydl.extract_info(query, download=False)
            if 'entries' in info_dict:
                entries = [entry for entry in info_dict['entries'] if entry.get('availability') == 'public']
            else:
                if info_dict.get('availability') == 'public':
                    entries = [info_dict]
                else:
                    entries = []

            if not entries:
                refined_query = f"{query} music video"
                info_dict = ydl.extract_info(refined_query, download=False)
                if 'entries' in info_dict:
                    entries = [entry for entry in info_dict['entries'] if entry.get('availability') == 'public']
                else:
                    if info_dict.get('availability') == 'public':
                        entries = [info_dict]
                    else:
                        entries = []
    except Exception as e:
        entries = []

    return entries

def youtube_ap_download_and_send_audio(chat_id, video_url, title):
    def skip_long_or_large(info_dict):
        duration = info_dict.get('duration')
        filesize = info_dict.get('filesize')
        if duration and duration > 720:
            return '–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –ø—Ä–æ–ø—É—Å–∫'
        if filesize and filesize > 15 * 1024 * 1024:
            return '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –ø—Ä–æ–ø—É—Å–∫'
        return None

    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': 'audio.%(ext)s',
        'quiet': True,
        'no_warnings': True,
        'continuedl': False,
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
        'match_filter': skip_long_or_large,
    }

    mp3_audio_file = None

    try:
        with open(os.devnull, 'w') as devnull:
            sys.stdout = devnull
            sys.stderr = devnull
            with YoutubeDL(ydl_opts) as ydl:
                info_dict = ydl.extract_info(video_url, download=True)
                mp3_audio_file = ydl.prepare_filename(info_dict).replace('.webm', '.mp3').replace('.m4a', '.mp3')

        sys.stdout = sys.__stdout__
        sys.stderr = sys.__stderr__

        if mp3_audio_file and os.path.exists(mp3_audio_file):
            if os.path.getsize(mp3_audio_file) > 15 * 1024 * 1024:
                os.remove(mp3_audio_file)
                return False

            with open(mp3_audio_file, 'rb') as audio:
                bot.send_audio(chat_id, audio, title=title)

    except Exception as e:
        print(f"Error downloading {title}: {str(e)}")
        return False

    finally:
        if mp3_audio_file and os.path.exists(mp3_audio_file):
            os.remove(mp3_audio_file)

    return True

def youtube_ap_update_buttons(chat_id):
    markup = InlineKeyboardMarkup()
    search_button = InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="musicbot_search")
    rules_button = InlineKeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="musicbot_rules")
    next_button = InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="musicbot_next")
    markup.add(search_button, rules_button)
    markup.add(next_button)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(commands=['–ø–æ—Ç–æ–∫'])
def youtube_ap_start_stream(message):
    chat_id = message.chat.id
    youtube_ap_user_sessions[chat_id] = {"search_query": None, "tracks": [], "played_urls": [], "searching": False}
    youtube_ap_update_buttons(chat_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("musicbot_"))
def youtube_ap_callback_query_handler(call):
    chat_id = call.message.chat.id
    session = youtube_ap_user_sessions.get(chat_id)

    if not session:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /–ø–æ—Ç–æ–∫.")
        return

    if call.data == "musicbot_search":
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube –∏–ª–∏ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å —Ç—Ä–µ–∫–æ–º).")
        bot.register_next_step_handler(call.message, youtube_ap_handle_search)
    elif call.data == "musicbot_rules":
        bot.send_message(chat_id, "üìú –ü—Ä–∞–≤–∏–ª–∞:\n1. –ù–µ –≤–≤–æ–¥–∏—Ç–µ –°–õ–ò–®–ö–û–ú –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è.\n2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç—Ä–µ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ YouTube.\n3. –ï—Å–ª–∏ —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.\n4. –ù–µ —Å—Ç–æ–∏—Ç –¥–µ–ª–∞—Ç—å –º–Ω–æ–∂–µ—Ç—Å–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ó–∞–ø—Ä–æ—Å - –æ–∂–∏–¥–∞–Ω–∏–µ.\n5. –†–∞–∑–º–µ—Ä —Ç—Ä–µ–∫–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 15 –ú–ë. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –Ω–µ —Å—Ç–æ–∏—Ç –≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∏–º—ã, –∫–æ–Ω—Ü–µ—Ä—Ç—ã –∏ —Ç.–¥.\n6. –í–∏–¥–µ–æ –¥–ª–∏–Ω–æ–π –±–æ–ª–µ–µ 12 –º–∏–Ω—É—Ç –ù–ï –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã.\n7. –ö–Ω–æ–ø–∫–∞ –¥–∞–ª–µ–µ –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç—Å—è –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç—Ä–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ.\n8 –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —é—Ç—å—é–±! –î—Ä—É–≥–æ–≥–æ —Ä–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–µ —Å—Ç–æ–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.")
    elif call.data == "musicbot_next":
        if session["tracks"]:
            bot.send_message(chat_id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –≥—Ä—É–∂—É —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫!")
            track = session["tracks"].pop(0)
            video_url = track['webpage_url']
            title = track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            success = youtube_ap_download_and_send_audio(chat_id, video_url, title)
            if not success:
                bot.send_message(chat_id, "–≠—Ç–æ—Ç —Ç—Ä–µ–∫ –±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫.")
            else:
                session['played_urls'].append(video_url)
                if len(session['played_urls']) >= 10:
                    bot.send_message(chat_id, "–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ (10). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        else:
            bot.send_message(chat_id, "–ò–¥–µ—Ç –ø–æ–¥–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã...")
            if session["search_query"]:
                tracks = youtube_ap_search_youtube(session["search_query"], num_results=10)
                session["tracks"] = [track for track in tracks if track['webpage_url'] not in session['played_urls']]
                if session["tracks"]:
                    track = session["tracks"].pop(0)
                    video_url = track['webpage_url']
                    title = track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    success = youtube_ap_download_and_send_audio(chat_id, video_url, title)
                    if not success:
                        bot.send_message(chat_id, "–≠—Ç–æ—Ç —Ç—Ä–µ–∫ –±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫.")
                    else:
                        session['played_urls'].append(video_url)
                        if len(session['played_urls']) >= 10:
                            bot.send_message(chat_id, "–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ (10). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
                else:
                    bot.send_message(chat_id, "–¢—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
            else:
                bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
        youtube_ap_user_sessions[chat_id] = session

def youtube_ap_handle_search(message):
    chat_id = message.chat.id
    query = message.text.strip()

    if not query:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
        return

    session = youtube_ap_user_sessions.get(chat_id)
    if session:
        bot.send_message(chat_id, "–ò–¥–µ—Ç –ø–æ–∏—Å–∫, –æ–∂–∏–¥–∞–π—Ç–µ...")
        session["search_query"] = query
        tracks = youtube_ap_search_youtube(query, num_results=10)
        session["tracks"] = [track for track in tracks if track['webpage_url'] not in session['played_urls']]
        
        if session["tracks"]:
            track = session["tracks"].pop(0)
            video_url = track['webpage_url']
            title = track.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            success = youtube_ap_download_and_send_audio(chat_id, video_url, title)
            if not success:
                bot.send_message(chat_id, "–≠—Ç–æ—Ç —Ç—Ä–µ–∫ –±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫.")
            else:
                session['played_urls'].append(video_url)
        else:
            bot.send_message(chat_id, "–¢—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        youtube_ap_user_sessions[chat_id] = session
    youtube_ap_update_buttons(chat_id)

bot.polling()
